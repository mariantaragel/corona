#! /usr/bin/bash

# File: corona
# Author: Marián Tarageľ
# Date: 29.03.2022
# Brief: Analyser of COVID-19 records
# TODO: merge, none, head, -s

POSIXLY_CORRECT=yes

usage()
{
    echo "Useage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]" >&2
    exit 1
}

filter_gender()
{
    INPUT=$(echo "$INPUT" | awk -F "," -v GENDER="$1" '$4 == GENDER {print $0}')
}

filter_date_after()
{
    INPUT=$(echo "$INPUT" | awk -F "," -v DATE="$1" '{
        if(DATE <= $2) {
            print $0
        }
    }')
}

filter_date_before()
{
    INPUT=$(echo "$INPUT" | awk -F "," -v DATE="$1" '{
        if(DATE >= $2) {
            print $0
        }
    }')
}

infected()
{
    COUNT_INFECTED=$(echo "$INPUT" | sed '1d' | wc -l)
    echo "$COUNT_INFECTED"
    exit 0
}

merge()
{
    INPUT=$(echo "$INPUT" | sort -t "," -k 4 | uniq -u)
}

gender()
{
    MEN_INFECTED=$(echo "$INPUT" | awk -F "," '$4 == "M" {print $0}' | wc -l)
    WOMEN_INFECTED=$(echo "$INPUT" | awk -F "," '$4 == "Z" {print $0}' | wc -l)
    echo "M: $MEN_INFECTED"
    echo "Z: $WOMEN_INFECTED"
    exit 0
}

age()
{
    echo "$INPUT" | sed '1d' | awk -F "," '{
            if(0 <= $3 && $3 <= 5) {
                count1++;
            }
            else if(6 <= $3 && $3 <= 15) {
                count2++;
            }
            else if(16 <= $3 && $3 <= 25) {
                count3++;
            }
            else if(26 <= $3 && $3 <= 35) {
                count4++;
            }
            else if(36 <= $3 && $3 <= 45) {
                count5++;
            }
            else if(46 <= $3 && $3 <= 55) {
                count6++;
            }
            else if(56 <= $3 && $3 <= 65) {
                count7++;
            }
            else if(66 <= $3 && $3 <= 75) {
                count8++;
            }
            else if(76 <= $3 && $3 <= 85) {
                count9++;
            }
            else if(86 <= $3 && $3 <= 95) {
                count10++;
            }
            else if(96 <= $3 && $3 <= 105) {
                count11++;
            }
            else if($3 >= 105) {
                count12++;
            }
            else {
                count13++;
            }
        }
        END {
            print "0-5\t: " count1;
            print "6-15\t: " count2;
            print "16-25\t: " count3;
            print "26-35\t: " count4;
            print "36-45\t: " count5;
            print "46-55\t: " count6;
            print "56-65\t: " count7;
            print "66-75\t: " count8;
            print "76-85\t: " count9;
            print "86-95\t: " count10;
            print "96-105\t: " count11;
            print ">105\t: " count12;
            print "None\t: " count13;
        }
    '
    exit 0
}

daily()
{
    echo "$INPUT" | sed '1d' | sort -t "," -k 2 | awk -F "," '
        BEGIN { before="2020-03-01"; }
        {
            if (before != $2) {
                print before": "count;
                before=$2;
                count=1;
            }
            else {
                count++;
            }
        }
        END { print before": "count; }
    '
    exit 0
}

monthly()
{
    echo "$INPUT" | sed '1d' | sort -t "," -k 2 | awk -F "," '
        BEGIN { before="2020-03"; }
        {
            if (before == substr($2, 1, 7)) {
                count++;
            }
            else {
                print before": "count;
                count=1;
                before=substr($2, 1, 7);
            }
        }
        END { print before": "count; }
    '
     exit 0
}

yearly()
{
    echo "$INPUT" | sed '1d' | sort -t "," -k 2 | awk -F -v GRAPH "," '
        BEGIN { before="2020"; }
        {
            if (before == substr($2, 1, 4)) {
                count++;
            }
            else {
                print before": "count;
                count=1;
                before=substr($2, 1, 4);
            }
        }
        END { print before": "count; }
    '
     exit 0
}

countries()
{
    echo "$INPUT" | sed '1d' | awk -F "," '
        {
            countries[$8] += 1;
        }
        END {
            for (i in countries) {
                if (i == "CZ") {
                    continue;
                }
                else if (i == "") {
                    print "None: "countries[i];
                }
                else {
                    print i": "countries[i];
                }
            }
        }
    ' | sort
    exit 0
}

districts()
{
    echo "$INPUT" | sed '1d' | awk -F "," '
        {
            districts[$6] += 1;
        }
        END {
            for (i in districts) {
                if (i == "") {
                    print "None: "districts[i];
                }
                else {
                    print i": "districts[i];
                }
            }
        }
    ' | sort
    exit 0
}


regions()
{
    echo "$INPUT" | sed '1d' | awk -F "," '
        {
            regions[$5] += 1;
        }
        END {
            for (i in regions) {
                if (i == "") {
                    print "None: "regions[i];
                }
                else {
                    print i": "regions[i];
                }
            }
        }
    ' | sort
    exit 0
}

validate_input()
{
    INPUT=$(echo "$INPUT" | sed '/^[[:space:]]*$/d' | sed 's/ //g' |
    awk -F "," '{
        month=substr($2, 6, 7);
        day=substr($2, 9, 10);
        if ($2 == "datum" && $3 == "vek") {print;}
        else if ($3 ~ /^[0-9]*$/) {
            if ((substr($2, 1, 5) ~ /202[0-2]-/) && (substr($2, 6, 8) ~ /0[1-9]|1[0-2]-/)) {
                if (month ~ /0[1,3,5,7,8]|1[0,2]/ &&
                    day ~ /0[1-9]|1[0-9]|2[0-9]|3[0-1]/) {
                        print;
                }
                else if (month ~ /0[4,6,9]|11/ &&
                    day ~ /0[1-9]|1[0-9]|2[0-9]|30/) {
                        print;
                }
                else if (month ~ /02/) {
                    if (substr($2, 1, 4) ~ /2020/ && day ~ /0[1-9]|1[0-9]|2[0-9]/) {
                        print;
                    }
                    else if (day ~ /0[1-9]|1[0-9]|2[0-8]/) {
                        print;
                    }
                    else {
                        print "Invalid date: "$0 | "cat 1>&2";
                    }
                }
                else {
                    print "Invalid date: "$0 | "cat 1>&2";
                }
            }
            else {
                print "Invalid date: "$0 | "cat 1>&2";
            }
        }
        else {
            print "Invalid age: "$0 | "cat 1>&2";
        }
    }')
}

for (( OPTIND=1; $OPTIND <= $#; OPTIND++))
do
    eval "OPT=\${$OPTIND}"
    case $OPT in
        *.gz) GZ_FILES=$OPT
            INPUT=$(zcat $GZ_FILES);;
        *.bz2) BZ2_FILES=$OPT
            INPUT=$(bzcat $BZ2_FILES);;
        *.csv) CSV_FILES=$OPT
            INPUT=$(cat $CSV_FILES);;
        -h) usage;;
        *) continue;;
    esac
done
if [[ "$INPUT" == "" ]];
    then INPUT=$(cat)
fi

OPTIND=1
validate_input

while getopts :a:b:g:hs FILTER;
do  case "$FILTER" in
        a) filter_date_after $OPTARG;;
        b) filter_date_before $OPTARG;;
        g) filter_gender $OPTARG;;
        h) usage;;
        s) eval "OPTARG=\${$OPTIND}"
            case "$OPTARG" in
                [0-9]*)  ((OPTIND++));;
                *)  OPTARG="";;
            esac
            GRAPH=1
            WIDTH=$OPTARG;;
        *) usage;;
    esac
done

((OPTIND--))
shift $OPTIND

for (( OPTIND=1; $OPTIND <= $#; OPTIND++))
do
    eval "OPT=\${$OPTIND}"
    case "$OPT" in
        infected) infected;;
        merge) merge;;
        gender) gender;;
        age) age;;
        daily) daily;;
        monthly) monthly;;
        yearly) yearly;;
        countries) countries;;
        districts) districts;;
        regions)  regions;;
        *.csv | *.gz | *.bz2) ;;
        *) usage;;
    esac
done

echo "$INPUT"

exit 0