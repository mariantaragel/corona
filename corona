#! /bin/bash

# File: corona
# Author: Marián Tarageľ
# Date: 30.03.2022
# Brief: Analyser of COVID-19 records
# TODO: merge, validate

POSIXLY_CORRECT=yes

usage()
{
    echo "Useage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]
    COMMAND může být jeden z:
        infected - spočítá počet nakažených
        merge - sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí
        gender - vypíše počet nakažených pro jednotlivá pohlaví
        age - vypíše statistiku počtu nakažených osob dle věku
        daily - vypíše statistiku nakažených osob pro jednotlivé dny
        monthly - vypíše statistiku nakažených osob pro jednotlivé měsíce
        yearly - vypíše statistiku nakažených osob pro jednotlivé roky
        countries - vypíše statistiku nakažených osob pro jednotlivé země nákazy
        districts - vypíše statistiku nakažených osob pro jednotlivé okresy
        regions - vypíše statistiku nakažených osob pro jednotlivé kraje

    FILTERS může být kombinace následujících:
        -a DATETIME - after: jsou uvažovány pouze záznamy PO tomto datu. DATETIME je formátu YYYY-MM-DD
        -b DATETIME - before: jsou uvažovány pouze záznamy PŘED tímto datem
        -g GENDER - jsou uvažovány pouze záznamy nakažených osob daného pohlaví. GENDER může být M (muži) nebo Z (ženy).
        -s [WIDTH] - u příkazů gender, age, daily, monthly, yearly, countries, districts a regions vypisuje data ne číselně, ale graficky v podobě histogramů. Nepovinný parametr WIDTH nastavuje šířku histogramů, tedy délku nejdelšího řádku, na WIDTH.
    
    -h - vypíše nápovědu s krátkým popisem každého příkazu a přepínače"
}

filter_date_after()
{
    INPUT="eval $INPUT | awk -F "," -v DATE="$1" '{
        if(DATE <= \$2) {
            print \$0;
        }
    }'"
}

filter_date_before()
{
    INPUT="eval $INPUT | awk -F "," -v DATE="$1" '{
        if(DATE >= \$2) {
            print \$0;
        }
    }'"
}

filter_gender()
{
    INPUT="eval $INPUT | awk -F "," -v GENDER="$1" '{
        if (NR == 1) {
            print \$0;
        }
        if (\$4 == GENDER) {
            print \$0;
        }
    }'"
}

infected()
{
    eval $INPUT | sed '1d' | wc -l
    exit 0
}

merge()
{
    echo "id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
    INPUT="eval $INPUT | sed '1d'"
    if [ -n "$INPUT" ]; then
        eval $INPUT
    fi
}

gender()
{
    eval $INPUT | sed '1d' | awk -F "," '
    {
        if ($4 == "M") {
            men++;
        }
        else if ($4 == "Z") {
            women++;
        }
        else {
            none++;
        }
    }
    END {
        print "M: "men;
        print "Z: "women;
        if (none != 0) {
            print "None: "none;
        }
    }'
    exit 0
}

gender_graphic()
{
    eval $INPUT | sed '1d' | awk -F "," -v width=$1 '
    {
        gender[$4] += 1;
    }
    END {
        if (width == "") {
            for (i in gender) {
                if (i == "") {
                    printf "None: ";
                    ratio = max / gender[i];
                    graphic = int(width / ratio);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
                else {
                    printf i": ";
                    modulo = gender[i] % 100000;
                    graphic = int((gender[i] - modulo)/100000);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
        }
        else {
            max = 0;
            for (i in gender) {
                if (gender[i] > max) {
                    max = gender[i];
                }
            }
            for (i in gender) {
                if (i == "") {
                    printf "None: ";
                    ratio = max / gender[i];
                    graphic = int(width / ratio);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
                else {
                    printf i": ";
                    ratio = max / gender[i];
                    graphic = int(width / ratio);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
        }
    }' | sort
    exit 0
}

age()
{
    eval $INPUT | sed '1d' | awk -F "," '{
            if(0 <= $3 && $3 <= 5) {
                age[0] += 1;
            }
            else if(6 <= $3 && $3 <= 15) {
                age[1] += 1;
            }
            else if(16 <= $3 && $3 <= 25) {
                age[2] += 1;
            }
            else if(26 <= $3 && $3 <= 35) {
                age[3] += 1;
            }
            else if(36 <= $3 && $3 <= 45) {
                age[4] += 1;
            }
            else if(46 <= $3 && $3 <= 55) {
                age[5] += 1;
            }
            else if(56 <= $3 && $3 <= 65) {
                age[6] += 1;
            }
            else if(66 <= $3 && $3 <= 75) {
                age[7] += 1;
            }
            else if(76 <= $3 && $3 <= 85) {
                age[8] += 1;
            }
            else if(86 <= $3 && $3 <= 95) {
                age[9] += 1;
            }
            else if(96 <= $3 && $3 <= 105) {
                age[10] += 1;
            }
            else if($3 >= 105) {
                age[11] += 1;
            }
            else {
                age[12] += 1;
            }
        }
        END {
            printf ("%-6s: %d\n", "0-5", age[0]);
            printf ("%-6s: %d\n", "6-15", age[1]);
            printf ("%-6s: %d\n", "16-25", age[2]);
            printf ("%-6s: %d\n", "26-35", age[3]);
            printf ("%-6s: %d\n", "36-45", age[4]);
            printf ("%-6s: %d\n", "46-55", age[5]);
            printf ("%-6s: %d\n", "56-65", age[6]);
            printf ("%-6s: %d\n", "66-75", age[7]);
            printf ("%-6s: %d\n", "76-85", age[8]);
            printf ("%-6s: %d\n", "86-95", age[9]);
            printf ("%-6s: %d\n", "96-105", age[10]);
            printf ("%-6s: %d\n", ">105", age[11]);
            printf ("%-6s: %d\n", "None", age[12]);
        }
    '
    exit 0
}

age_graphic()
{
    eval $INPUT | sed '1d' | sort -t ',' -k 3,3 -n -s| awk -F "," -v width=$1 '
        {
            if(0 <= $3 && $3 <= 5) {
                age["0-5"] += 1;
            }
            else if(6 <= $3 && $3 <= 15) {
                age["6-15"] += 1;
            }
            else if(16 <= $3 && $3 <= 25) {
                age["16-25"] += 1;
            }
            else if(26 <= $3 && $3 <= 35) {
                age["26-35"] += 1;
            }
            else if(36 <= $3 && $3 <= 45) {
                age["36-45"] += 1;
            }
            else if(46 <= $3 && $3 <= 55) {
                age["46-55"] += 1;
            }
            else if(56 <= $3 && $3 <= 65) {
                age["56-65"] += 1;
            }
            else if(66 <= $3 && $3 <= 75) {
                age["66-75"] += 1;
            }
            else if(76 <= $3 && $3 <= 85) {
                age["76-85"] += 1;
            }
            else if(86 <= $3 && $3 <= 95) {
                age["86-95"] += 1;
            }
            else if(96 <= $3 && $3 <= 105) {
                age["96-105"] += 1;
            }
            else if($3 >= 105) {
                age[">105"] += 1;
            }
            else {
                age["None"] += 1;
            }
        }
        END {
            if (width == "") {
                for (i in age) {
                    printf ("%-6s: ", i);
                    modulo = age[i] % 10000;
                    graphic = int((age[i] - modulo)/10000);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
            else {
                max = 0;
                for (i in age) {
                    if (age[i] > max) {
                        max = age[i];
                    }
                }
                for (i in age) {
                    printf ("%-6s: ", i);
                    ratio = max / age[i];
                    graphic = int(width / ratio);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
        }
    ' | sort -s
    exit 0
}

daily()
{
    eval $INPUT | sed '1d' | sort -t "," -k 2 | awk -F "," '
        BEGIN { before="2020-03-01"; }
        {
            if ($2 == "") {
                none_date++;
            }
            else if (before != $2) {
                print before": "count;
                before=$2;
                count=1;
            }
            else {
                count++;
            }
        }
        END { print before": "count;
            if (none_date != 0) {
                print "None: "none_date;
            }
        }
    '
    exit 0
}

daily_graphic()
{
    eval $INPUT | sed '1d' | awk -F "," -v width=$1 '
        {
            if ($2 == "") {
                days["None"]++;
            }
            else {
                day=substr($2, 1, 10);
                days[day] += 1;
            }
        }
        END {
            if (width == "") {
                for (i in days) {
                    printf i": ";
                    modulo = days[i] % 500;
                    graphic = int((days[i] - modulo)/500);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
            else {
                max = 0;
                for (i in days) {
                    if (days[i] > max) {
                        max = days[i];
                    }
                }
                for (i in days) {
                    printf i": ";
                    ratio = max / days[i];
                    graphic = int(width / ratio);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
        }
    ' | sort
     exit 0
}

monthly()
{
    eval $INPUT | sed '1d' | sort -t "," -k 2 | awk -F "," '
        BEGIN { before="2020-03"; }
        {
            if ($2 == "") {
                none_date++;
            }
            else if (before == substr($2, 1, 7)) {
                count++;
            }
            else {
                print before": "count;
                count=1;
                before=substr($2, 1, 7);
            }
        }
        END { print before": "count;
        if (none_date != 0) {
            print "None: "none_date;
        } }
    '
     exit 0
}

monthly_graphic()
{
    eval $INPUT | sed '1d' | awk -F "," -v width=$1 '
        {
            if ($2 == "") {
                months["None"]++;
            }
            else {
                month=substr($2, 1, 7);
                months[month] += 1;
            }
        }
        END {
            if (width == "") {
                for (i in months) {
                    printf i": ";
                    modulo = months[i] % 10000;
                    graphic = int((months[i] - modulo)/10000);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
            else {
                max = 0;
                for (i in months) {
                    if (months[i] > max) {
                        max = months[i];
                    }
                }
                for (i in months) {
                    printf i": ";
                    ratio = max / months[i];
                    graphic = int(width / ratio);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
        }
    ' | sort
     exit 0
}

yearly()
{
    eval $INPUT | sed '1d' | sort -t "," -k 2 | awk -F "," '
        BEGIN { before="2020"; }
        {
            if ($2 == "") {
                none_date++;
            }
            else if (before == substr($2, 1, 4)) {
                count++;
            }
            else {
                print before": "count;
                count=1;
                before=substr($2, 1, 4);
            }
        }
        END { print before": "count;
            if(none_date != 0) {
                print "None: "none_date;
            }
        }
    '
     exit 0
}

yearly_graphic()
{
    eval $INPUT | sed '1d' | awk -F "," -v width=$1 '
        {
            if ($2 == "") {
                years["None"]++;
            }
            else {
                year=substr($2, 1, 4);
                years[year] += 1;
            }
        }
        END {
            if (width == "") {
                for (i in years) {
                    printf i": ";
                    modulo = years[i] % 100000;
                    graphic = int((years[i] - modulo)/100000);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
            else {
                max = 0;
                for (i in years) {
                    if (years[i] > max) {
                        max = years[i];
                    }
                }
                for (i in years) {
                    printf i": ";
                    ratio = max / years[i];
                    graphic = int(width / ratio);
                    for (i=0; i < graphic; i++) {
                        printf "#";
                    }
                    printf "\n";
                }
            }
        }
    ' | sort
     exit 0
}

countries()
{
    eval $INPUT | sed '1d' | awk -F "," '
        {
            countries[$8] += 1;
        }
        END {
            for (i in countries) {
                if (i == "CZ") {
                    continue;
                }
                else if (i == "") {
                    continue;
                }
                else {
                    print i": "countries[i];
                }
            }
        }
    ' | sort
    exit 0
}

countries_graphic()
{
    eval $INPUT | sed '1d' | awk -F "," -v width=$1 '
        {
            if ($8 != "") {
                countries[$8] += 1;
            }
        }
        END {
            if (width == "") {
                for (i in countries) {
                    if (i == "CZ") {
                        continue;
                    }
                    else {
                        printf i": ";
                        modulo = countries[i] % 100;
                        graphic = int((countries[i] - modulo)/100);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                }
            }
            else {
                max = 0;
                for (i in countries) {
                    if (countries[i] > max) {
                        max = countries[i];
                    }
                }
                for (i in countries) {
                    if (i == "CZ") {
                        continue;
                    }
                    else{
                        printf i": ";
                        ratio = max / countries[i];
                        graphic = int(width / ratio);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                }
            }
        }
    ' | sort
     exit 0
}

districts()
{
    eval $INPUT | sed '1d' | awk -F "," '
        {
            districts[$6] += 1;
        }
        END {
            for (i in districts) {
                if (i == "") {
                    print "None: "districts[i];
                }
                else {
                    print i": "districts[i];
                }
            }
        }
    ' | sort
    exit 0
}

districts_graphic()
{
    eval $INPUT | sed '1d' | awk -F "," -v width=$1 '
        {
            districts[$6] += 1;
        }
        END {
            if (width == "") {
                for (i in districts) {
                    if (i == "") {
                        printf "None: ";
                        modulo = districts[i] % 1000;
                        graphic = int((districts[i] - modulo)/1000);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                    else {
                        printf i": ";
                        modulo = districts[i] % 1000;
                        graphic = int((districts[i] - modulo)/1000);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                }
            }
            else {
                max = 0;
                for (i in districts) {
                    if (districts[i] > max) {
                        max = districts[i];
                    }
                }
                for (i in districts) {
                    if (i == "") {
                        printf "None: ";
                        ratio = max / districts[i];
                        graphic = int(width / ratio);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                    else{
                        printf i": ";
                        ratio = max / districts[i];
                        graphic = int(width / ratio);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                }
            }
        }
    ' | sort
     exit 0
}

regions()
{
    eval $INPUT | sed '1d' | awk -F "," '
        {
            regions[$5] += 1;
        }
        END {
            for (i in regions) {
                if (i == "") {
                    print "None: "regions[i];
                }
                else {
                    print i": "regions[i];
                }
            }
        }
    ' | sort
    exit 0
}

regions_graphic()
{
    eval $INPUT | sed '1d' | awk -F "," -v width=$1 '
        {
            regions[$5] += 1;
        }
        END {
            if (width == "") {
                for (i in regions) {
                    if (i == "") {
                        printf "None: ";
                        modulo = regions[i] % 10000;
                        graphic = int((regions[i] - modulo)/10000);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                    else {
                        printf i": ";
                        modulo = regions[i] % 10000;
                        graphic = int((regions[i] - modulo)/10000);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                }
            }
            else {
                max = 0;
                for (i in regions) {
                    if (regions[i] > max) {
                        max = regions[i];
                    }
                }
                for (i in regions) {
                    if (i == "") {
                        printf "None: ";
                        ratio = max / regions[i];
                        graphic = int(width / ratio);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                    else{
                        printf i": ";
                        ratio = max / regions[i];
                        graphic = int(width / ratio);
                        for (i=0; i < graphic; i++) {
                            printf "#";
                        }
                        printf "\n";
                    }
                }
            }
        }
    ' | sort
     exit 0
}

validate_input()
{
    INPUT="eval $INPUT | sed '/^[[:space:]]*$/d' | sed 's/ //g'"
}

for (( OPTIND=1; OPTIND <= $#; OPTIND++))
do
    eval "OPT=\${$OPTIND}"
    case $OPT in
        *.gz) GZ_FILES=$OPT
            INPUT="zcat $GZ_FILES";;
        *.bz2) BZ2_FILES=$OPT
            INPUT="bzcat $BZ2_FILES";;
        *.csv) CSV_FILES=$OPT
            INPUT="cat $CSV_FILES";;
        -h) usage
            exit 0;;
        *) continue;;
    esac
done
if [[ "$INPUT" == "" ]];
    then INPUT="cat"
fi

OPTIND=1
validate_input

while getopts :a:b:g:hs FILTER;
do  case "$FILTER" in
        a) filter_date_after $OPTARG;;
        b) filter_date_before $OPTARG;;
        g) filter_gender $OPTARG;;
        h) usage
            exit 0;;
        s) eval "OPTARG=\${$OPTIND}"
            zero=0;
            case "$OPTARG" in
                [0-9]*)  ((OPTIND++));;
                *)  OPTARG="";;
            esac
            GRAPH="true"
            WIDTH=$OPTARG;;
        *) usage >&2
            exit 1;;
    esac
done

((OPTIND--))
shift $OPTIND

for (( OPTIND=1; OPTIND <= $#; OPTIND++))
do
    eval "OPT=\${$OPTIND}"
    case "$OPT" in
        infected) infected;;
        merge) merge;;
        gender) if [ -n "$GRAPH" ]; then
                gender_graphic $WIDTH
            else
                gender
            fi;;
        age) if [ -n "$GRAPH" ]; then
                age_graphic $WIDTH
            else
                age
            fi;;
        daily) if [ -n "$GRAPH" ]; then
                    daily_graphic $WIDTH
                else
                    daily
                fi;;
        monthly) if [ -n "$GRAPH" ]; then
                    monthly_graphic $WIDTH
                else
                    monthly
                fi;;
        yearly) if [ -n "$GRAPH" ]; then
                    yearly_graphic $WIDTH
                else
                    yearly
                fi;;
        countries) if [ -n "$GRAPH" ]; then
                    countries_graphic $WIDTH
                else
                    countries
                fi;;
        districts) if [ -n "$GRAPH" ]; then
                    districts_graphic $WIDTH
                else
                    districts
                fi;;
        regions)  if [ -n "$GRAPH" ]; then
                    regions_graphic $WIDTH
                else
                    regions
                fi;;
        *.csv | *.gz | *.bz2) ;;
        *) usage >&2
            exit 1;;
    esac
done

merge

exit 0
